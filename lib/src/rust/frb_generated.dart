// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -1854594347;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_fusion_wallet',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Wallet crateApiWalletWalletContextCreateMasterWallet(
      {required WalletContext that});

  Wallet crateApiWalletWalletContextDeriveFromDomain(
      {required WalletContext that, required String domain});

  WalletContext crateApiWalletWalletContextFromSeedPhrase(
      {required String phrase});

  List<WalletToken> crateApiWalletWalletContextGetInitialSupportedTokens(
      {required WalletContext that});

  double crateApiWalletWalletTokenAutoAccessorGetBalance(
      {required WalletToken that});

  WalletTokenNetWork crateApiWalletWalletTokenAutoAccessorGetNetwork(
      {required WalletToken that});

  String crateApiWalletWalletTokenAutoAccessorGetSymbol(
      {required WalletToken that});

  String? crateApiWalletWalletTokenAutoAccessorGetTokenAddress(
      {required WalletToken that});

  double crateApiWalletWalletTokenAutoAccessorGetUsdWorth(
      {required WalletToken that});

  String crateApiWalletWalletTokenAutoAccessorGetUserAddress(
      {required WalletToken that});

  void crateApiWalletWalletTokenAutoAccessorSetBalance(
      {required WalletToken that, required double balance});

  void crateApiWalletWalletTokenAutoAccessorSetNetwork(
      {required WalletToken that, required WalletTokenNetWork network});

  void crateApiWalletWalletTokenAutoAccessorSetSymbol(
      {required WalletToken that, required String symbol});

  void crateApiWalletWalletTokenAutoAccessorSetTokenAddress(
      {required WalletToken that, String? tokenAddress});

  void crateApiWalletWalletTokenAutoAccessorSetUsdWorth(
      {required WalletToken that, required double usdWorth});

  void crateApiWalletWalletTokenAutoAccessorSetUserAddress(
      {required WalletToken that, required String userAddress});

  Future<void> crateApiWalletWalletTokenUpdateBalanceAndWorth(
      {required WalletToken that});

  Wallet crateApiWalletWalletFromSeed({required Seed seed});

  String crateApiWalletWalletToBitcoinAddress({required Wallet that});

  String crateApiWalletWalletToEthereumAddress({required Wallet that});

  String crateApiWalletWalletToIcpPrincipal({required Wallet that});

  Future<String> crateApiWalletGenerateSeedPhrase();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Seed;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Seed;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SeedPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Wallet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Wallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletContext;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WalletContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletToken;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletTokenPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Wallet crateApiWalletWalletContextCreateMasterWallet(
      {required WalletContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletContextCreateMasterWalletConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletContextCreateMasterWalletConstMeta =>
      const TaskConstMeta(
        debugName: "WalletContext_create_master_wallet",
        argNames: ["that"],
      );

  @override
  Wallet crateApiWalletWalletContextDeriveFromDomain(
      {required WalletContext that, required String domain}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
            that, serializer);
        sse_encode_String(domain, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletContextDeriveFromDomainConstMeta,
      argValues: [that, domain],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletContextDeriveFromDomainConstMeta =>
      const TaskConstMeta(
        debugName: "WalletContext_derive_from_domain",
        argNames: ["that", "domain"],
      );

  @override
  WalletContext crateApiWalletWalletContextFromSeedPhrase(
      {required String phrase}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(phrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletContextFromSeedPhraseConstMeta,
      argValues: [phrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletContextFromSeedPhraseConstMeta =>
      const TaskConstMeta(
        debugName: "WalletContext_from_seed_phrase",
        argNames: ["phrase"],
      );

  @override
  List<WalletToken> crateApiWalletWalletContextGetInitialSupportedTokens(
      {required WalletContext that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletContextGetInitialSupportedTokensConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletContextGetInitialSupportedTokensConstMeta =>
          const TaskConstMeta(
            debugName: "WalletContext_get_initial_supported_tokens",
            argNames: ["that"],
          );

  @override
  double crateApiWalletWalletTokenAutoAccessorGetBalance(
      {required WalletToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenAutoAccessorGetBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_auto_accessor_get_balance",
        argNames: ["that"],
      );

  @override
  WalletTokenNetWork crateApiWalletWalletTokenAutoAccessorGetNetwork(
      {required WalletToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_token_net_work,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorGetNetworkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  String crateApiWalletWalletTokenAutoAccessorGetSymbol(
      {required WalletToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorGetSymbolConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenAutoAccessorGetSymbolConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_auto_accessor_get_symbol",
        argNames: ["that"],
      );

  @override
  String? crateApiWalletWalletTokenAutoAccessorGetTokenAddress(
      {required WalletToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorGetTokenAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletTokenAutoAccessorGetTokenAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletToken_auto_accessor_get_token_address",
            argNames: ["that"],
          );

  @override
  double crateApiWalletWalletTokenAutoAccessorGetUsdWorth(
      {required WalletToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorGetUsdWorthConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletTokenAutoAccessorGetUsdWorthConstMeta =>
          const TaskConstMeta(
            debugName: "WalletToken_auto_accessor_get_usd_worth",
            argNames: ["that"],
          );

  @override
  String crateApiWalletWalletTokenAutoAccessorGetUserAddress(
      {required WalletToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorGetUserAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletTokenAutoAccessorGetUserAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletToken_auto_accessor_get_user_address",
            argNames: ["that"],
          );

  @override
  void crateApiWalletWalletTokenAutoAccessorSetBalance(
      {required WalletToken that, required double balance}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        sse_encode_f_64(balance, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorSetBalanceConstMeta,
      argValues: [that, balance],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenAutoAccessorSetBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_auto_accessor_set_balance",
        argNames: ["that", "balance"],
      );

  @override
  void crateApiWalletWalletTokenAutoAccessorSetNetwork(
      {required WalletToken that, required WalletTokenNetWork network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        sse_encode_wallet_token_net_work(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorSetNetworkConstMeta,
      argValues: [that, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  void crateApiWalletWalletTokenAutoAccessorSetSymbol(
      {required WalletToken that, required String symbol}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        sse_encode_String(symbol, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorSetSymbolConstMeta,
      argValues: [that, symbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenAutoAccessorSetSymbolConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_auto_accessor_set_symbol",
        argNames: ["that", "symbol"],
      );

  @override
  void crateApiWalletWalletTokenAutoAccessorSetTokenAddress(
      {required WalletToken that, String? tokenAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        sse_encode_opt_String(tokenAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorSetTokenAddressConstMeta,
      argValues: [that, tokenAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletTokenAutoAccessorSetTokenAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletToken_auto_accessor_set_token_address",
            argNames: ["that", "tokenAddress"],
          );

  @override
  void crateApiWalletWalletTokenAutoAccessorSetUsdWorth(
      {required WalletToken that, required double usdWorth}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        sse_encode_f_64(usdWorth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorSetUsdWorthConstMeta,
      argValues: [that, usdWorth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletTokenAutoAccessorSetUsdWorthConstMeta =>
          const TaskConstMeta(
            debugName: "WalletToken_auto_accessor_set_usd_worth",
            argNames: ["that", "usdWorth"],
          );

  @override
  void crateApiWalletWalletTokenAutoAccessorSetUserAddress(
      {required WalletToken that, required String userAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        sse_encode_String(userAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletTokenAutoAccessorSetUserAddressConstMeta,
      argValues: [that, userAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletWalletTokenAutoAccessorSetUserAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletToken_auto_accessor_set_user_address",
            argNames: ["that", "userAddress"],
          );

  @override
  Future<void> crateApiWalletWalletTokenUpdateBalanceAndWorth(
      {required WalletToken that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletTokenUpdateBalanceAndWorthConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletTokenUpdateBalanceAndWorthConstMeta =>
      const TaskConstMeta(
        debugName: "WalletToken_update_balance_and_worth",
        argNames: ["that"],
      );

  @override
  Wallet crateApiWalletWalletFromSeed({required Seed seed}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
            seed, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletFromSeedConstMeta,
      argValues: [seed],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletFromSeedConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_from_seed",
        argNames: ["seed"],
      );

  @override
  String crateApiWalletWalletToBitcoinAddress({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletToBitcoinAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletToBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_to_bitcoin_address",
        argNames: ["that"],
      );

  @override
  String crateApiWalletWalletToEthereumAddress({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletToEthereumAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletToEthereumAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_to_ethereum_address",
        argNames: ["that"],
      );

  @override
  String crateApiWalletWalletToIcpPrincipal({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletWalletToIcpPrincipalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletToIcpPrincipalConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_to_icp_principal",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiWalletGenerateSeedPhrase() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletGenerateSeedPhraseConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGenerateSeedPhraseConstMeta =>
      const TaskConstMeta(
        debugName: "generate_seed_phrase",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Seed =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Seed =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Wallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Wallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletContext => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken;

  @protected
  Seed
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SeedImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletContext
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletToken
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletContext
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletToken
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Seed
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SeedImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletContext
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<WalletToken>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WalletTokenNetWork dco_decode_wallet_token_net_work(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletTokenNetWork.values[raw as int];
  }

  @protected
  Seed
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SeedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletContext
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletToken
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletContext
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletToken
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Seed
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SeedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletContext
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<WalletToken>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletToken>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
              deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WalletTokenNetWork sse_decode_wallet_token_net_work(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WalletTokenNetWork.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
          Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SeedImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          WalletContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletContextImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          WalletToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletTokenImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          WalletToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletTokenImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          WalletContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletContextImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          WalletToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletTokenImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSeed(
          Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SeedImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletContext(
          WalletContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          WalletToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletTokenImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          List<WalletToken> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletToken(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wallet_token_net_work(
      WalletTokenNetWork self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class SeedImpl extends RustOpaque implements Seed {
  // Not to be used by end users
  SeedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SeedImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Seed,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Seed,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SeedPtr,
  );
}

@sealed
class WalletContextImpl extends RustOpaque implements WalletContext {
  // Not to be used by end users
  WalletContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletContext,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletContext,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletContextPtr,
  );

  Wallet createMasterWallet() =>
      RustLib.instance.api.crateApiWalletWalletContextCreateMasterWallet(
        that: this,
      );

  Wallet deriveFromDomain({required String domain}) => RustLib.instance.api
      .crateApiWalletWalletContextDeriveFromDomain(that: this, domain: domain);

  List<WalletToken> getInitialSupportedTokens() =>
      RustLib.instance.api.crateApiWalletWalletContextGetInitialSupportedTokens(
        that: this,
      );
}

@sealed
class WalletImpl extends RustOpaque implements Wallet {
  // Not to be used by end users
  WalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Wallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Wallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletPtr,
  );

  String toBitcoinAddress() =>
      RustLib.instance.api.crateApiWalletWalletToBitcoinAddress(
        that: this,
      );

  String toEthereumAddress() =>
      RustLib.instance.api.crateApiWalletWalletToEthereumAddress(
        that: this,
      );

  String toIcpPrincipal() =>
      RustLib.instance.api.crateApiWalletWalletToIcpPrincipal(
        that: this,
      );
}

@sealed
class WalletTokenImpl extends RustOpaque implements WalletToken {
  // Not to be used by end users
  WalletTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletToken,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletToken,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletTokenPtr,
  );

  double get balance =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorGetBalance(
        that: this,
      );

  WalletTokenNetWork get network =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorGetNetwork(
        that: this,
      );

  String get symbol =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorGetSymbol(
        that: this,
      );

  String? get tokenAddress =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorGetTokenAddress(
        that: this,
      );

  double get usdWorth =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorGetUsdWorth(
        that: this,
      );

  String get userAddress =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorGetUserAddress(
        that: this,
      );

  set balance(double balance) =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorSetBalance(
          that: this, balance: balance);

  set network(WalletTokenNetWork network) =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorSetNetwork(
          that: this, network: network);

  set symbol(String symbol) =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorSetSymbol(
          that: this, symbol: symbol);

  set tokenAddress(String? tokenAddress) =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorSetTokenAddress(
          that: this, tokenAddress: tokenAddress);

  set usdWorth(double usdWorth) =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorSetUsdWorth(
          that: this, usdWorth: usdWorth);

  set userAddress(String userAddress) =>
      RustLib.instance.api.crateApiWalletWalletTokenAutoAccessorSetUserAddress(
          that: this, userAddress: userAddress);

  Future<void> updateBalanceAndWorth() =>
      RustLib.instance.api.crateApiWalletWalletTokenUpdateBalanceAndWorth(
        that: this,
      );
}
