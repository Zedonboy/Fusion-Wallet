// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `ascii_to_hardened_derivation_path`, `fetch_balance`, `get_eth_balance`, `pubkey_to_der_encoded`, `to_checksum_address`

Future<String> generateSeedPhrase() =>
    RustLib.instance.api.crateApiWalletGenerateSeedPhrase();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Seed>>
abstract class Seed implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Wallet>>
abstract class Wallet implements RustOpaqueInterface {
  static Wallet fromSeed({required Seed seed}) =>
      RustLib.instance.api.crateApiWalletWalletFromSeed(seed: seed);

  String toBitcoinAddress();

  String toEthereumAddress();

  String toIcpPrincipal();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WalletContext>>
abstract class WalletContext implements RustOpaqueInterface {
  Wallet createMasterWallet();

  Wallet deriveFromDomain({required String domain});

  static WalletContext fromSeedPhrase({required String phrase}) =>
      RustLib.instance.api
          .crateApiWalletWalletContextFromSeedPhrase(phrase: phrase);

  List<WalletToken> getInitialSupportedTokens();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WalletToken>>
abstract class WalletToken implements RustOpaqueInterface {
  double get balance;

  WalletTokenNetWork get network;

  String get symbol;

  String? get tokenAddress;

  double get usdWorth;

  String get userAddress;

  set balance(double balance);

  set network(WalletTokenNetWork network);

  set symbol(String symbol);

  set tokenAddress(String? tokenAddress);

  set usdWorth(double usdWorth);

  set userAddress(String userAddress);

  Future<void> updateBalanceAndWorth();
}

enum WalletTokenNetWork {
  bitcoin,
  ethereum,
  internetComputer,
  ;
}
